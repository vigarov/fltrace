#!/bin/bash
set -e
# set -x

#
# Run a command with fltrace
#

#Defaults
SCRIPT_PATH=`realpath $0`
SCRIPT_DIR=`dirname ${SCRIPT_PATH}`
NHANDLERS=1
SAMPLES_PER_SEC=0

usage="Usage: $(basename $0) <command> [opt=value] -- <user command> \n
Commands:\n
record \t\t record faults for a command with fltrace. See options to configure.\n
report \t\t merge fault samples for a previous record run\n
visualize \t visualize fault samples with a flamegraph\n
Required options for record:\n
-L, --localmem \t local memory (in MB) for remote memory\n
-M, --maxmem \t\t total memory (in MB) needed for the app\n
More options:\n
-C, --cores \t\t number of (fault) handler threads (defaults to $NHANDLERS)\n
-S, --samplerate \t limit the number of fault samples collected per second (defaults to 0 i.e., log all faults)\n
-h, --help \t\t this usage information message\n"

error() {
    local message=$1
    echo "Error: $message"
    exit 1
}
usage_error() {
    local message=$1
    echo "Error: $message"
    echo -e $usage
    exit 1
}

# parse cli
for i in "$@"
do
case $i in
    --) # end argument parsing
    shift
    break
    ;;

    # commands
    record)
    COMMAND=record
    ;;

    report)
    COMMAND=report
    ;;

    visualize)
    COMMAND=visualize
    ;;

    # record options
    -L=*|--localmem=*)
    LOCAL_MEM_MB=${i#*=}
    ;;

    -M=*|--maxmem=*)
    MAX_MEM_MB=${i#*=}
    ;;

    -C=*|--cores=*)
    NHANDLERS=${i#*=}
    ;;

    -S=*|--samplerate=*)
    SAMPLES_PER_SEC=${i#*=}
    ;;

    -M|--merge)
    MERGE_TRACES=1
    ;;

    -V|--visualize)
    VISUALIZE=1
    ;;

    -h|--help)
    echo -e $usage
    exit
    ;;

    *)  # unknown option
    echo "Unkown Option: $i"
    echo -e $usage
    exit
    ;;
esac
shift
done

# check options
re='^[0-9]+$'
if [[ -z "$COMMAND" ]]; then usage_error "missing fltrace command";   fi


# record 
if [[ $COMMAND == "record" ]]; then
    # check record options
    if [[ -z "$LOCAL_MEM_MB" ]]; then usage_error "missing required opt -L/--localmem";  fi
    if [[ -z "$MAX_MEM_MB" ]]; then usage_error "missing required opt -M/--maxmem";    fi
    if ! [[ "$LOCAL_MEM_MB" =~ $re ]] ; then usage_error "$LOCAL_MEM_MB is not a number";   fi
    if ! [[ "$MAX_MEM_MB" =~ $re ]] ; then usage_error "$MAX_MEM_MB is not a number";     fi
    totalmb=$((LOCAL_MEM_MB + MAX_MEM_MB))
    freemb=$(free -m | awk '/^Mem:/{print $7}')
    if [[ $totalmb -gt $freemb ]]; then usage_error "local + maxmem ($totalmb MB) exceeds available memory ($freemb MB)"; fi
    if ! [[ $@ ]]; then usage_error "missing command to run (must follow --)";   fi
    if [ ! -f ${SCRIPT_DIR}/fltrace.so ]; then usage_error "fltrace.so not found, did you 'make'?"; fi

    # run command with fltrace
    rm -rf fltrace-data-*   # clean up old data
    env LD_PRELOAD=${SCRIPT_DIR}/fltrace.so \
        FLTRACE_LOCAL_MEMORY_MB=${LOCAL_MEM_MB} \
        FLTRACE_MAX_MEMORY_MB=${MAX_MEM_MB} \
        FLTRACE_NHANDLERS=${NHANDLERS} \
        FLTRACE_MAX_SAMPLES_PER_SEC=${SAMPLES_PER_SEC} \
        $@
    echo "Run complete. Use 'fltrace report' to merge fault samples, stored in `pwd`"
fi

# report
if [[ $COMMAND == "report" ]]; then
    tracedpids=$(ls fltrace-data-faults-*.out | sed 's/fltrace-data-faults-\(.*\)-\(.*\).out/\1/')
    if ! [[ $tracedpids ]]; then error "no fltrace-data-faults-*.out files found; run 'fltrace record'?"; fi
    for pid in $tracedpids; do
        outfile=fltrace-data-report-${pid}.out
        faultdata=$(ls fltrace-data-faults-${pid}-*.out)
        if [ ! -f "fltrace-data-procmaps-${pid}.out" ]; then error "no procmaps file found for pid ${pid}"; fi
        procmapflag="-pm fltrace-data-procmaps-${pid}.out"
        python3 ${SCRIPT_DIR}/scripts/parse.py -i ${faultdata} ${procmapflag} > ${outfile}
        echo "Parsed fault trace for pid ${pid} to ${outfile}"
        echo "Use 'fltrace visualize' to generate a flamegraph."
    done
fi

# report
if [[ $COMMAND == "visualize" ]]; then
    reportpids=$(ls fltrace-data-report-*.out | sed 's/fltrace-data-report-\(.*\).out/\1/')
    if ! [[ $reportpids ]]; then error "no fltrace-data-report-*.out files found; run 'fltrace report'?"; fi
    for pid in $reportpids; do
        report=fltrace-data-report-${pid}.out
        python3 ${SCRIPT_DIR}/scripts/prepare_flame_graph.py -i ${report} -o fltrace-data-flamegraph-${pid}.dat
        python3 ${SCRIPT_DIR}/scripts/prepare_flame_graph.py -i ${report} -z -o fltrace-data-flamegraph-alloc-${pid}.dat
        ${SCRIPT_DIR}/scripts/flamegraph.pl fltrace-data-flamegraph-${pid}.dat --color=fault --width=800 > fltrace-data-flamegraph-${pid}.svg
        ${SCRIPT_DIR}/scripts/flamegraph.pl fltrace-data-flamegraph-alloc-${pid}.dat --color=fault --width=800 > fltrace-data-flamegraph-alloc-${pid}.svg
        echo "Generated flamegraph for pid ${pid} at ./fltrace-data-flamegraph-${pid}.svg"
        echo "Generated flamegraph for pid ${pid} (Allocation-only faults) at ./fltrace-flamegraph-alloc-${pid}.svg"
    done
fi
